import os
import logging
from typing import Dict, List
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes
)
from dotenv import load_dotenv

# –õ–æ–≥–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
STYLE_CONFIG = {
    "colors": {
        "dark_green": "#006455",
        "emerald": "#00AF96",
        "yellow": "#F5E646",
        "black": "#000000"
    },
    "logo_path": "assets/logos/mzoo-logo-circle-mono-black.jpg",
    "website": "https://moscowzoo.ru/my-zoo/become-a-guardian/",
    "social_media": {
        "share_text": "–Ø –ø—Ä–æ—à–µ–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞ –∏ –º–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ - {animal}!\n\n–ü—Ä–æ–π–¥–∏ –∏ —Ç—ã: https://t.me/{bot_username}",
        "contact_email": "zoo-guardians@moscowzoo.ru",
        "contact_phone": "+7 (495) 255-57-63"
    }
}

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
QUESTIONS = [
    {
        "text": "–ö–∞–∫–æ–π —É –≤–∞—Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä?",
        "options": [
            {"text": "–°–ø–æ–∫–æ–π–Ω—ã–π –∏ –º—É–¥—Ä—ã–π", "traits": ["—Å–ª–æ–Ω"]},
            {"text": "–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –∏ –∑–∞–≥–∞–¥–æ—á–Ω—ã–π", "traits": ["–º–∞–Ω—É–ª"]},
            {"text": "–û–±—â–∏—Ç–µ–ª—å–Ω—ã–π –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π", "traits": ["—Å—É—Ä–∏–∫–∞—Ç"]},
            {"text": "–Ø—Ä–∫–∏–π –∏ –∞—Ä—Ç–∏—Å—Ç–∏—á–Ω—ã–π", "traits": ["—Ñ–ª–∞–º–∏–Ω–≥–æ"]},
            {"text": "–õ—é–±–æ–ø—ã—Ç–Ω—ã–π –∏ –∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å–Ω—ã–π", "traits": ["–µ–Ω–æ—Ç"]}
        ]
    },
    {
        "text": "–ö–∞–∫ –≤—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?",
        "options": [
            {"text": "–†–∞–∑–º—ã—à–ª—è—é –∏ –ø–æ–º–æ–≥–∞—é –¥—Ä—É–≥–∏–º", "traits": ["—Å–ª–æ–Ω"]},
            {"text": "–ù–∞–±–ª—é–¥–∞—é –∑–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–∏–º", "traits": ["–º–∞–Ω—É–ª"]},
            {"text": "–û–±—â–∞—é—Å—å —Å –¥—Ä—É–∑—å—è–º–∏", "traits": ["—Å—É—Ä–∏–∫–∞—Ç"]},
            {"text": "–ó–∞–Ω–∏–º–∞—é—Å—å —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–º", "traits": ["—Ñ–ª–∞–º–∏–Ω–≥–æ"]},
            {"text": "–ò—Å—Å–ª–µ–¥—É—é —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ", "traits": ["–µ–Ω–æ—Ç"]}
        ]
    },
    {
        "text": "–ö–∞–∫ –≤—ã —Ä–µ–∞–≥–∏—Ä—É–µ—Ç–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã?",
        "options": [
            {"text": "–†–µ—à–∞—é –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ", "traits": ["—Å–ª–æ–Ω"]},
            {"text": "–î–µ–π—Å—Ç–≤—É—é –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ", "traits": ["–º–∞–Ω—É–ª"]},
            {"text": "–°–æ–±–∏—Ä–∞—é –∫–æ–º–∞–Ω–¥—É", "traits": ["—Å—É—Ä–∏–∫–∞—Ç"]},
            {"text": "–ü–æ–¥—Ö–æ–∂—É —Ç–≤–æ—Ä—á–µ—Å–∫–∏", "traits": ["—Ñ–ª–∞–º–∏–Ω–≥–æ"]},
            {"text": "–ò—â—É –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è", "traits": ["–µ–Ω–æ—Ç"]}
        ]
    }
]

ANIMALS = {
    "—Å–ª–æ–Ω": {
        "description": "–í—ã - —Å–ª–æ–Ω! –ú—É–¥—Ä—ã–π, —Å–∏–ª—å–Ω—ã–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π. –ö–∞–∫ –∞–∑–∏–∞—Ç—Å–∫–∏–π —Å–ª–æ–Ω –ü–∞–º–∏—Ä –∏–∑ –Ω–∞—à–µ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞, –≤—ã –æ—Ç–ª–∏—á–∞–µ—Ç–µ—Å—å —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ–º –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å—é.",
        "image": "assets/animals/african_elephant.jpg",
        "sponsor_info": "50 000‚ÇΩ/–º–µ—Å - –∫–æ—Ä–º–ª–µ–Ω–∏–µ, —É—Ö–æ–¥ –∏ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
        "traits": ["–º—É–¥—Ä–æ—Å—Ç—å", "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", "–∑–∞–±–æ—Ç–∞"]
    },
    "–º–∞–Ω—É–ª": {
        "description": "–í—ã - –º–∞–Ω—É–ª! –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –∏ –∑–∞–≥–∞–¥–æ—á–Ω—ã–π, –∫–∞–∫ –Ω–∞—à —Å–∏–º–≤–æ–ª - –¥–∏–∫–∏–π –∫–æ—Ç –º–∞–Ω—É–ª. –í—ã —Ü–µ–Ω–∏—Ç–µ –ª–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã.",
        "image": "assets/animals/manul.jpg",
        "sponsor_info": "30 000‚ÇΩ/–º–µ—Å - —Å–ø–µ—Ü—Ä–∞—Ü–∏–æ–Ω –∏–∑ –º—è—Å–∞ –∏ –≤–∏—Ç–∞–º–∏–Ω–æ–≤",
        "traits": ["–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å", "–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å", "–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å"]
    },
    "—Å—É—Ä–∏–∫–∞—Ç": {
        "description": "–í—ã - —Å—É—Ä–∏–∫–∞—Ç! –≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∏ –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π, –∫–∞–∫ –Ω–∞—à–∏ —Å—É—Ä–∏–∫–∞—Ç—ã. –í—ã –ª—é–±–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å —Å–≤–æ–µ–π '—Å–µ–º—å–µ'.",
        "image": "assets/animals/meerkat.jpg",
        "sponsor_info": "15 000‚ÇΩ/–º–µ—Å - –∫–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–∞—Å–µ–∫–æ–º—ã–º–∏ –∏ —Ñ—Ä—É–∫—Ç–∞–º–∏",
        "traits": ["–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "—ç–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç—å", "–ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å"]
    },
    "—Ñ–ª–∞–º–∏–Ω–≥–æ": {
        "description": "–í—ã - —Ñ–ª–∞–º–∏–Ω–≥–æ! –ì—Ä–∞—Ü–∏–æ–∑–Ω—ã–π –∏ –∞—Ä—Ç–∏—Å—Ç–∏—á–Ω—ã–π, –∫–∞–∫ –Ω–∞—à–∏ —Ä–æ–∑–æ–≤—ã–µ —Ñ–ª–∞–º–∏–Ω–≥–æ. –í—ã –≤—ã–¥–µ–ª—è–µ—Ç–µ—Å—å –∏–∑ —Ç–æ–ª–ø—ã –∏ —Ü–µ–Ω–∏—Ç–µ –∫—Ä–∞—Å–æ—Ç—É.",
        "image": "assets/animals/flamingo.jpg",
        "sponsor_info": "20 000‚ÇΩ/–º–µ—Å - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ—Ä–º –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –æ–∫—Ä–∞—Å–∞",
        "traits": ["–∞—Ä—Ç–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å", "–≥—Ä–∞—Ü–∏—è", "—è—Ä–∫–æ—Å—Ç—å"]
    },
    "–µ–Ω–æ—Ç": {
        "description": "–í—ã - –µ–Ω–æ—Ç-–ø–æ–ª–æ—Å–∫—É–Ω! –ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å–Ω—ã–π –∏ –ª—é–±–æ–ø—ã—Ç–Ω—ã–π, –∫–∞–∫ –Ω–∞—à–∏ –µ–Ω–æ—Ç—ã. –í—ã –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç–µ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –ª—é–±–∏—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ.",
        "image": "assets/animals/raccoon.jpg",
        "sponsor_info": "18 000‚ÇΩ/–º–µ—Å - —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω –∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ —Å—Ä–µ–¥—ã",
        "traits": ["–ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ", "–∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å"]
    }
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

async def setup_commands(application: Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –±–æ—Ç–∞"""
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("share", "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º"),
        BotCommand("contact", "–°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º")
    ]
    await application.bot.set_my_commands(commands)


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error("–û—à–∏–±–∫–∞:", exc_info=context.error)
    if isinstance(update, Update) and update.effective_message:
        await update.effective_message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    user_id = update.effective_user.id
    user_data[user_id] = {"answers": [], "current_question": 0}

    keyboard = [
        [InlineKeyboardButton("üêæ –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data='start_quiz')],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏", callback_data='about')],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –∑–æ–æ–ø–∞—Ä–∫–∞", callback_data='show_contacts')]
    ]

    try:
        if os.path.exists(STYLE_CONFIG["logo_path"]):
            with open(STYLE_CONFIG["logo_path"], 'rb') as logo:
                await update.message.reply_photo(
                    photo=logo,
                    caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞!\n\n"
                     "–ü—Ä–æ–π–¥–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ —É–∑–Ω–∞–π—Ç–µ, –∫–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –≤–∞–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç!",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
        else:
            await update.message.reply_text(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞!\n\n"
                     "–ü—Ä–æ–π–¥–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ —É–∑–Ω–∞–π—Ç–µ, –∫–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –≤–∞–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç!",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞!\n\n"
                     "–ü—Ä–æ–π–¥–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ —É–∑–Ω–∞–π—Ç–µ, –∫–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –≤–∞–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


async def show_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π URL"""
    query = update.callback_query
    await query.answer()

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    contacts_text = (
        "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞:</b>\n\n"
        "üïí –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 9:00 –¥–æ 18:00\n\n"
        "‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–ø—Ä–∞–≤–æ–∫:\n"
        "<code>+7 (495) 255-57-63</code>\n\n"
        "üìß –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:\n"
        "<code>info@moscowzoo.ru</code>\n\n"
        "üìç –ê–¥—Ä–µ—Å:\n"
        "–ú–æ—Å–∫–≤–∞, –ë. –ì—Ä—É–∑–∏–Ω—Å–∫–∞—è —É–ª., 1\n\n"
    )

    keyboard = []

    # 1. –ö–Ω–æ–ø–∫–∞ –∫–∞—Ä—Ç—ã
    maps_url = "https://yandex.ru/maps/-/CDb8NXL1"
    if maps_url and maps_url.startswith('http'):
        keyboard.append([InlineKeyboardButton("üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö", url=maps_url)])

    # 2. –ö–Ω–æ–ø–∫–∞ —Å–∞–π—Ç–∞
    website_url = "https://moscowzoo.ru"
    if website_url and website_url.startswith('http'):
        keyboard.append([InlineKeyboardButton("üåê –ü–æ—Å–µ—Ç–∏—Ç—å —Å–∞–π—Ç", url=website_url)])

    # 3. –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data='main_menu')])

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ)
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=contacts_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML',
            disable_web_page_preview=True
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")

        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫—Ä—è–∫–Ω—É–ª
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=(
                "–ö–æ–Ω—Ç–∞–∫—Ç—ã –∑–æ–æ–ø–∞—Ä–∫–∞:\n"
                "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 255-57-63\n"
                "–ê–¥—Ä–µ—Å: –ú–æ—Å–∫–≤–∞, –ë. –ì—Ä—É–∑–∏–Ω—Å–∫–∞—è —É–ª., 1\n"
                "–°–∞–π—Ç: https://www.moscowzoo.ru"
            )
        )

async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    user_data[user_id] = {"answers": [], "current_question": 0}
    await ask_question(query.message, user_id)


async def ask_question(message, user_id: int) -> None:
    """–ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        current_q = user_data[user_id]["current_question"]

        if current_q >= len(QUESTIONS):
            await show_result(message, user_id)
            return

        question = QUESTIONS[current_q]
        keyboard = [
            [InlineKeyboardButton(opt["text"], callback_data=f'ans_{i}')]
            for i, opt in enumerate(question["options"])
        ]

        await message.reply_text(
            text=f"–í–æ–ø—Ä–æ—Å {current_q + 1}/{len(QUESTIONS)}:\n{question['text']}",
            reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–Ω–æ–≤–æ /start")


async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    if user_id not in user_data:
        await start_quiz(update, context)
        return

    try:
        answer_idx = int(query.data.split('_')[1])
        current_q = user_data[user_id]["current_question"]

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–µ—Ä—Ç—ã –≤ –æ—Ç–≤–µ—Ç—ã
        selected_traits = QUESTIONS[current_q]["options"][answer_idx]["traits"]
        user_data[user_id]["answers"].extend(selected_traits)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        user_data[user_id]["current_question"] += 1
        await ask_question(query.message, user_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–Ω–æ–≤–æ.")
        await start_quiz(update, context)


async def show_result(message, user_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∂–∏–≤–æ—Ç–Ω–æ–≥–æ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_animal = calculate_result(user_data[user_id]["answers"])
        animal_info = ANIMALS.get(result_animal, ANIMALS["—Å–ª–æ–Ω"])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        caption = (
            f"<b>MOSCOW ZOO PRESENTS</b>\n\n"
            f"üéâ <b>–í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ - {result_animal.upper()}!</b>\n\n"
            f"{animal_info['description']}\n\n"
            f"<b>–•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —á–µ—Ä—Ç—ã:</b> {', '.join(animal_info['traits'])}\n\n"
            f"<b>C—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ–∫–∏:</b> {animal_info['sponsor_info']}"

        )

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
        try:
            if os.path.exists(animal_info["image"]):
                with open(animal_info["image"], 'rb') as photo:
                    await message.reply_photo(
                        photo=photo,
                        caption=caption,
                        parse_mode='HTML'
                    )
            else:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –Ω–µ–≤–µ–¥–æ–º–æ–π –ø—Ä–∏—á–∏–Ω–µ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await message.reply_text(
                    text=caption,
                    parse_mode='HTML'
                )
                logger.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø—É—Ç–∏: {animal_info['image']}")
        except Exception as photo_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {photo_error}")
            await message.reply_text(
                text=caption,
                parse_mode='HTML'
            )

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [InlineKeyboardButton("üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö", callback_data='share_result')],
            [InlineKeyboardButton(
                text=f"üõ° –í–∑—è—Ç—å –ø–æ–¥ –æ–ø–µ–∫—É",
                url=STYLE_CONFIG["website"]
            )],
            [InlineKeyboardButton("üîÅ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ", callback_data='start_quiz')],
            [InlineKeyboardButton("‚ÑπÔ∏è –í—Å–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", url=STYLE_CONFIG["website"])],
            [InlineKeyboardButton("üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]

        await message.reply_text(
            text="–•–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å–≤–æ–µ–≥–æ —Ç–æ—Ç–µ–º–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ?",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
        await message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await main_menu(message)


def calculate_result(answers: list) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    if not answers:
        return "—Å–ª–æ–Ω"

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
    animal_counts = {}
    for animal in answers:
        if animal in ANIMALS:
            animal_counts[animal] = animal_counts.get(animal, 0) + 1

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
    return max(animal_counts.items(), key=lambda x: x[1])[0] if animal_counts else "—Å–ª–æ–Ω"


async def share_result(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    if user_id not in user_data or not user_data[user_id].get("answers"):
        await query.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!")
        return

    result_animal = calculate_result(user_data[user_id]["answers"])
    bot_username = context.bot.username

    share_text = (
        f"–Ø –ø—Ä–æ—à–µ–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞ –∏ –º–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ - {result_animal}!\n\n"
        f"–ü—Ä–æ–π–¥–∏ –∏ —Ç—ã: https://t.me/{bot_username}"
    )

    keyboard = [
        [
            InlineKeyboardButton("Telegram", url=f"https://t.me/share/url?text={share_text}"),
            InlineKeyboardButton("VK", url=f"https://vk.com/share.php?comment={share_text}")
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='main_menu')
        ]
    ]

    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü—Å–µ—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def about_program(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏"""
    query = update.callback_query
    await query.answer()

    text = (
        "üêØ <b>–ü—Ä–æ–≥—Ä–∞–º–º–∞ ¬´–í–æ–∑—å–º–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ –ø–æ–¥ –æ–ø–µ–∫—É¬ª</b> üêª\n\n"
        "–≠—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–º–æ—á—å –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –∑–æ–æ–ø–∞—Ä–∫—É –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –µ–≥–æ –æ–±–∏—Ç–∞—Ç–µ–ª—è—Ö.\n\n"
        "<b>–°—Ç–∞–≤ –æ–ø–µ–∫—É–Ω–æ–º, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:</b>\n"
        "‚úÖ –ò–º–µ–Ω–Ω–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç\n"
        "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø–æ–¥–æ–ø–µ—á–Ω–æ–º\n"
        "‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–≤–µ—â–∞—Ç—å –µ–≥–æ\n\n"
    )

    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data='main_menu')],
        [InlineKeyboardButton("üõ° –°—Ç–∞—Ç—å –æ–ø–µ–∫—É–Ω–æ–º", url=STYLE_CONFIG["website"])]
    ]

    try:
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML',
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await query.message.reply_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML',
            disable_web_page_preview=True
        )



async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üêæ –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data='start_quiz')],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏", callback_data='about')],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –∑–æ–æ–ø–∞—Ä–∫–∞", callback_data='show_contacts')]
    ]

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        if os.path.exists(STYLE_CONFIG["logo_path"]):
            with open(STYLE_CONFIG["logo_path"], 'rb') as logo:
                await query.message.reply_photo(
                    photo=logo,
                    caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞!\n\n"
                            "–ü—Ä–æ–π–¥–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ —É–∑–Ω–∞–π—Ç–µ, –∫–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –≤–∞–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç!",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
        else:
            # –ï—Å–ª–∏ –ª–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            await query.edit_message_text(
                text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞!\n\n"
                     "–ü—Ä–æ–π–¥–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ —É–∑–Ω–∞–π—Ç–µ, –∫–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –≤–∞–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç!",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            logger.warning(f"–õ–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {STYLE_CONFIG['logo_path']}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é: {e}")
        await query.edit_message_text(
            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    load_dotenv()
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    application = Application.builder().token(token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(start_quiz, pattern='^start_quiz$'))
    application.add_handler(CallbackQueryHandler(about_program, pattern='^about$'))
    application.add_handler(CallbackQueryHandler(main_menu, pattern='^main_menu$'))
    application.add_handler(CallbackQueryHandler(handle_answer, pattern='^ans_'))
    application.add_handler(CallbackQueryHandler(show_contacts, pattern='^show_contacts$'))
    application.add_handler(CallbackQueryHandler(share_result, pattern='^share_result$'))
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == '__main__':
    main()